//O(N X N) Method
class Solution {
    public TreeNode bstFromPreorder(int[] preorder) {
        TreeNode root=new TreeNode(preorder[0]);
        
        for(int i=1;i< preorder.length;i++){
            TreeNode it=root;
            while(true){
                if(preorder[i] <it.val){
                    if(it.left==null){
                        it.left= new TreeNode(preorder[i]);
                        break;
                    }else{
                        it=it.left;
                    }
                }else{
                    if(it.right==null){
                        it.right=new TreeNode(preorder[i]);
                        break;
                    }else{
                        it=it.right;
                    }
                }
            }
        }
        return root;
    }
}


//O(N) Recursion Method by striver

class Solution {
    public TreeNode bstFromPreorder(int[] preorder) {
        return bst(preorder,Integer.MAX_VALUE,new int[]{0});
    }
    public TreeNode bst(int[] A, int bound, int[] i){
        if(i[0]==A.length || A[i[0]] > bound){
            return null;
        }
        TreeNode root=new TreeNode(A[i[0]++]);
        root.left=bst(A,root.val,i);
        root.right=bst(A,bound,i);
        
        return root;
    }
}
